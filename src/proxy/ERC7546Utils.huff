/// @title ERC7546 Utils
/// @notice SPDX-License-Identifier: MIT
/// @author Kai Hiroi <https://github.com/KaiHiroi>
/// @dev This library contract provides getters and event emitting update functions for https://ercs.ethereum.org/ERCS/erc-7546[ERC7546].
/// @notice Adapted from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/ERC1967/ERC1967Upgrade.sol)

#include "../utils/CommonErrors.huff"
#include "../utils/Errors.huff"

// Function Definitions
#define function getImplementation(bytes4 functionSelector) view returns (address)

// ERC7546 Constants
/// @notice keccak256("erc7546.proxy.dictionary") - 1
#define constant _DICTIONARY_SLOT = 0x267691be3525af8a813d30db0c9e2bad08f63baecf6dceb85e2cf3676cff56f4

// Events
/// @notice Emitted when the dictionary is upgraded.
#define event DictionaryUpgraded(address indexed dictionary)

// Custom Errors
/// @notice Emitted when the value is sent without initData
#define constant ERC1967_NON_PAYABLE = 0x455243313936375f4e6f6e50617961626c650000000000000000000000000000
#define constant ERC1967_NON_PAYABLE_LENGTH = 0x12
#define macro REVERT_NON_PAYABLE(condition) = {
    [ERC1967_NON_PAYABLE]
    [ERC1967_NON_PAYABLE_LENGTH]
    <condition>
    REQUIRE()
}

// Implementation Macros

/// @notice Returns the current implementation via dictionary
#define macro GET_IMPLEMENTATION() = takes (2) returns (1) {
    // Input Stack: [fSelector, dicAddr]

    __FUNC_SIG(getImplementation)   // [getImplSelector, fSelector, dicAddr]
    0x20 shl or
    0x00 mstore                     // [dicAddr]
    0x20 0x00                       // [retOffset, retSize, dicAddr]
    0x08 0x18                       // [argOffset, argSize, retOffset, retSize, dicAddr]
    dup5 gas                        // [gas, dicAddr, argOffset, argSize, retOffset, retSize, dicAddr]
    staticcall                      // [success, dicAddr]
    // Return the returned data
    iszero proxy_call_failed jumpi  // [dicAddr]
        pop 0x00 mload              // [addr]

    proxy_call_failed:
        returndatasize 0x00 revert

    // __ImplCall_Success jumpi        // [dicAddr]
    //     0x00 0x00 revert
    // __ImplCall_Success:
    //     pop
}

// UCS Macros

/// @notice Returns the current dictionary
#define macro GET_DICTIONARY() = takes (0) returns (1) {
    [_DICTIONARY_SLOT] sload    // [address]
}

/// @notice Sets the new dictionary
#define macro SET_DICTIONARY() = takes (1) returns (0) {
    // Input Stack: [addr]

    // Check that the address is a contract
    dup1 extcodesize                // [isContract(addr), addr]
    __Is_Contract_JUMP jumpi        // [addr]
        NON_CONTRACT(0x00)

    // The implementation is a contract, so we can now set the dictionary slot
    __Is_Contract_JUMP:
        [_DICTIONARY_SLOT] sstore   // []
}

#define macro _CHECK_NON_PAYABLE() = takes (0) returns (0) {
    callvalue iszero               // [hasValue()]
    __NON_PAYABLE_JUMP jumpi
        REVERT_NON_PAYABLE(0x00)
    __NON_PAYABLE_JUMP:
}

#define macro UPGRADE_DICTIONARY_TO() = takes (1) returns (0) {
    // Input Stack: [addr]

    // Set dictionary
    dup1 SET_DICTIONARY()   // [addr]

    // Emit event
    __EVENT_HASH(DictionaryUpgraded)    // [sig, addr]  Push the event sig hash (topic0) & addr (topic1)
    0x00 0x00 log2                      // []           Emit the event without data
}
